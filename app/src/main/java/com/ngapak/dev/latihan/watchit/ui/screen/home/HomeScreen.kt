package com.ngapak.dev.latihan.watchit.ui.screen.homeimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.PaddingValuesimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxHeightimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.lazy.grid.GridCellsimport androidx.compose.foundation.lazy.grid.LazyVerticalGridimport androidx.compose.foundation.lazy.grid.itemsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.rounded.AccountCircleimport androidx.compose.material.icons.rounded.Favoriteimport androidx.compose.material.icons.rounded.Searchimport androidx.compose.material3.Cardimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.TopAppBarimport androidx.compose.material3.TopAppBarDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.lifecycle.viewmodel.compose.viewModelimport com.ngapak.dev.latihan.watchit.data.local.entities.MoviesEntityimport com.ngapak.dev.latihan.watchit.di.Injectionimport com.ngapak.dev.latihan.watchit.factory.ViewModelFactoryimport com.ngapak.dev.latihan.watchit.ui.common.UiStateimport com.ngapak.dev.latihan.watchit.ui.component.MovieCardimport com.ngapak.dev.latihan.watchit.ui.theme.WatchItThemeimport com.valentinilk.shimmer.shimmer@Composablefun HomeScreen(    navigateToDetail: (Int) -> Unit,    navigateToAboutPage: () -> Unit,    navigateToFavorite: () -> Unit,    navigateSearch: () -> Unit,    modifier: Modifier = Modifier,    viewModel: HomeScreenViewModel = viewModel(        factory = ViewModelFactory(            Injection.provideMoviesRepository(LocalContext.current)        )    ),) {    Scaffold(        topBar = {            MyAppBar(                navigateToAboutPage = navigateToAboutPage,                navigateToFavorite = navigateToFavorite,                navigateSearch = navigateSearch,            )        },        modifier = Modifier    ) { padding ->        viewModel.uiState.collectAsState().value.let { state ->            when (state) {                is UiState.Loading -> {                    MoviesLoading()                }                is UiState.Success -> {                    val moviesData = mutableListOf<MoviesEntity>()                    state.data.let {                        for (movie in it) {                            if (movie != null) moviesData.add(movie)                        }                    }                    MoviesGridContent(                        movies = moviesData,                        modifier = modifier.padding(padding),                        viewModel = viewModel,                        navigateToDetail = navigateToDetail                    )                }                is UiState.Error -> {                    Column(                        modifier = modifier                            .fillMaxHeight()                            .fillMaxWidth(),                        verticalArrangement = Arrangement.Center,                        horizontalAlignment = Alignment.CenterHorizontally                    ) {                        Text(                            text = "Failed getting movies. Tap to try again ${state.errorMessage}",                            textAlign = TextAlign.Center,                            modifier = modifier                                .clickable { viewModel.getMovies() }                                .padding(12.dp)                        )                    }                }            }        }    }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun MyAppBar(    navigateToAboutPage: () -> Unit,    navigateToFavorite: () -> Unit,    navigateSearch: () -> Unit) {    TopAppBar(        title = { Text(text = "Watch It!") },        colors = TopAppBarDefaults.mediumTopAppBarColors(            containerColor = MaterialTheme.colorScheme.secondaryContainer        ),        actions = {            IconButton(onClick = { navigateSearch() }) {                Icon(imageVector = Icons.Rounded.Search, contentDescription = "Search movie")            }            IconButton(onClick = {                navigateToFavorite()            }) {                Icon(imageVector = Icons.Rounded.Favorite, contentDescription = "Favorite Film")            }            IconButton(onClick = {                navigateToAboutPage()            }) {                Icon(imageVector = Icons.Rounded.AccountCircle, contentDescription = "about_page")            }        }    )}@Composablefun MoviesGridContent(    movies: List<MoviesEntity>,    navigateToDetail: (Int) -> Unit,    viewModel: HomeScreenViewModel,    modifier: Modifier) {    if (movies.isEmpty()) {        Column(            modifier = modifier                .fillMaxHeight()                .fillMaxWidth(),            verticalArrangement = Arrangement.Center,            horizontalAlignment = Alignment.CenterHorizontally        ) {            Text(                text = "No movie available. Tap to try again",                textAlign = TextAlign.Center,                modifier = modifier.clickable { viewModel.getMovies() })        }    } else {        LazyVerticalGrid(            columns = GridCells.Adaptive(200.dp),            contentPadding = PaddingValues(horizontal = 12.dp, vertical = 12.dp),            horizontalArrangement = Arrangement.spacedBy(8.dp),            verticalArrangement = Arrangement.spacedBy(8.dp),            modifier = modifier        ) {            items(movies, key = { it.id ?: 0 }) { data ->                MovieCard(                    id = data.id ?: 0,                    imageUrl = data.posterPath ?: "",                    title = data.title ?: "",                    rating = data.voteAverage ?: 0.0,                    navigateToDetail = navigateToDetail                )            }        }    }}@Preview(showBackground = true)@Composablefun MoviesLoading() {    WatchItTheme {        LazyVerticalGrid(            columns = GridCells.Adaptive(200.dp),            contentPadding = PaddingValues(),            horizontalArrangement = Arrangement.spacedBy(8.dp),            verticalArrangement = Arrangement.spacedBy(8.dp),        ) {            items(9) { _ ->                Card(modifier = Modifier.shimmer()) {                    Column {                        Box(                            modifier = Modifier                                .fillMaxWidth()                                .height(200.dp)                                .background(Color.DarkGray)                        )                        Spacer(modifier = Modifier.height(6.dp))                        Box(                            modifier = Modifier                                .size(height = 30.dp, width = 100.dp)                                .background(Color.DarkGray)                        )                        Spacer(modifier = Modifier.height(6.dp))                        Box(                            modifier = Modifier                                .size(height = 20.dp, width = 80.dp)                                .background(Color.DarkGray)                        )                    }                }            }        }    }}